// Planner + Budget Tracker Web App with Editable, Deletable, and Checkable Tasks
import { useState, useEffect } from "react";

export default function PlannerBudgetLayout() {
  const days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
  const [tasks, setTasks] = useState(() => {
    const saved = localStorage.getItem("plannerTasks");
    return saved ? JSON.parse(saved) : Object.fromEntries(days.map(day => [day, []]));
  });
  const [inputs, setInputs] = useState(Object.fromEntries(days.map(day => [day, ""])));

  const [transactions, setTransactions] = useState(() => {
    const saved = localStorage.getItem("budgetData");
    return saved ? JSON.parse(saved) : [];
  });
  const [entry, setEntry] = useState({ type: "income", label: "", amount: "" });

  useEffect(() => {
    localStorage.setItem("plannerTasks", JSON.stringify(tasks));
  }, [tasks]);

  useEffect(() => {
    localStorage.setItem("budgetData", JSON.stringify(transactions));
  }, [transactions]);

  const addTask = (day) => {
    if (inputs[day].trim() === "") return;
    const newTask = { text: inputs[day], done: false };
    const updated = { ...tasks, [day]: [...tasks[day], newTask] };
    setTasks(updated);
    setInputs({ ...inputs, [day]: "" });
  };

  const toggleTask = (day, index) => {
    const updated = { ...tasks };
    updated[day][index].done = !updated[day][index].done;
    setTasks(updated);
  };

  const deleteTask = (day, index) => {
    const updated = { ...tasks };
    updated[day].splice(index, 1);
    setTasks(updated);
  };

  const addTransaction = () => {
    if (!entry.label || !entry.amount) return;
    setTransactions([...transactions, { ...entry, amount: parseFloat(entry.amount) }]);
    setEntry({ type: "income", label: "", amount: "" });
  };

  const income = transactions.filter(t => t.type === "income").reduce((sum, t) => sum + t.amount, 0);
  const expenses = transactions.filter(t => t.type === "expense").reduce((sum, t) => sum + t.amount, 0);
  const savings = income - expenses;

  return (
    <div className="min-h-screen bg-gray-100 p-4 font-sans">
      <header className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold">📅 Planner & 💰 Budget Tracker</h1>
        <div className="space-x-2">
          <button className="bg-blue-500 text-white px-4 py-2 rounded-xl shadow">Login</button>
          <button className="bg-gray-300 px-4 py-2 rounded-xl">Settings</button>
        </div>
      </header>

      <main className="grid grid-cols-1 md:grid-cols-3 gap-4">
        {/* Weekly Planner Section */}
        <section className="md:col-span-2 bg-white p-4 rounded-2xl shadow">
          <h2 className="text-xl font-semibold mb-2">Weekly Planner</h2>
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-3">
            {days.map((day) => (
              <div key={day} className="bg-gray-50 p-3 rounded-xl border">
                <h3 className="font-semibold mb-1">{day}</h3>
                <ul className="text-sm text-gray-700 space-y-1 mb-2">
                  {tasks[day].map((task, index) => (
                    <li key={index} className="flex items-center justify-between">
                      <div
                        className={`flex-1 cursor-pointer ${task.done ? 'line-through text-gray-400' : ''}`}
                        onClick={() => toggleTask(day, index)}
                      >
                        {task.done ? "✅" : "🔘"} {task.text}
                      </div>
                      <button
                        className="text-red-500 hover:text-red-700 text-sm ml-2"
                        onClick={() => deleteTask(day, index)}
                      >
                        ❌
                      </button>
                    </li>
                  ))}
                </ul>
                <div className="flex items-center space-x-1">
                  <input
                    type="text"
                    className="flex-1 px-2 py-1 rounded border text-sm"
                    placeholder="New task..."
                    value={inputs[day]}
                    onChange={(e) => setInputs({ ...inputs, [day]: e.target.value })}
                  />
                  <button
                    className="bg-green-500 text-white px-2 py-1 rounded"
                    onClick={() => addTask(day)}
                  >
                    ➕
                  </button>
                </div>
              </div>
            ))}
          </div>
        </section>

        {/* Budget Tracker Section */}
        <section className="bg-white p-4 rounded-2xl shadow">
          <h2 className="text-xl font-semibold mb-2">Budget Overview</h2>
          <div className="space-y-4">
            <div className="flex justify-between">
              <span>Income:</span>
              <span>${income}</span>
            </div>
            <div className="flex justify-between">
              <span>Expenses:</span>
              <span>${expenses}</span>
            </div>
            <div className="flex justify-between font-semibold">
              <span>Savings:</span>
              <span>${savings}</span>
            </div>
            <div className="flex gap-2">
              <select
                value={entry.type}
                onChange={(e) => setEntry({ ...entry, type: e.target.value })}
                className="border rounded px-2 py-1 text-sm"
              >
                <option value="income">Income</option>
                <option value="expense">Expense</option>
              </select>
              <input
                type="text"
                placeholder="Label"
                value={entry.label}
                onChange={(e) => setEntry({ ...entry, label: e.target.value })}
                className="border rounded px-2 py-1 text-sm flex-1"
              />
              <input
                type="number"
                placeholder="Amount"
                value={entry.amount}
                onChange={(e) => setEntry({ ...entry, amount: e.target.value })}
                className="border rounded px-2 py-1 text-sm w-24"
              />
              <button
                className="bg-blue-500 text-white px-2 py-1 rounded"
                onClick={addTransaction}
              >
                ➕
              </button>
            </div>
            <ul className="text-sm text-gray-700 space-y-1 max-h-40 overflow-y-auto">
              {transactions.map((t, i) => (
                <li key={i}>
                  {t.type === "income" ? "➕" : "➖"} {t.label}: ${t.amount}
                </li>
              ))}
            </ul>
          </div>
        </section>
      </main>
    </div>
  );
}
